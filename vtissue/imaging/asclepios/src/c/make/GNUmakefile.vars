#
# Variables par defaut pour un GNUmakefile standardise
# Author: Gregoire Malandain
# Date: Thu Jul  2 14:25:09 MET DST 1998
#

#
#
#
VERBOSE=TRUE



#
# Variables d'environnement
#
INTERNECPU =
INTERNEOS =
INTERNEOBJTYPE =

UNAMES =
UNAMER =

#
# Si elle n'existe pas, on cherche une valeur 
# pour INTERNECPU
#
ifeq "$(strip $(INTERNECPU))" ""
  ifeq "$(strip $(MYCPU))" "alpha"
    INTERNECPU = $(MYCPU)
  endif
endif
ifeq "$(strip $(INTERNECPU))" ""
  ifeq "$(strip $(MYCPU))" "linux"
    INTERNECPU = $(MYCPU)
  endif
endif
ifeq "$(strip $(INTERNECPU))" ""
  ifeq "$(strip $(MYCPU))" "solaris"
    INTERNECPU = $(MYCPU)
  endif
endif
ifeq "$(strip $(INTERNECPU))" ""
  ifeq "$(strip $(MYCPU))" "sgi"
    INTERNECPU = $(MYCPU)
  endif
endif
      
ifeq "$(strip $(INTERNECPU))" "" 
  UNAMES = $(shell uname -s)
  #
  # on attend
  # alpha    -> OSSF1
  # linux   -> Linux
  # solaris -> SunOS (tant pis pour les SunOS 4.*)
  # sgi     -> IRIX64 (c'est pasteur, tant pis pour les autres)
  # 
  ifeq "$(strip $(UNAMES))" "OSF1"
    INTERNECPU = alpha
  endif
  ifeq "$(strip $(UNAMES))" "Linux"
    INTERNECPU = linux
  endif
  ifeq "$(strip $(UNAMES))" "SunOS"
    INTERNECPU = solaris
  endif
  ifeq "$(strip $(UNAMES))" "IRIX64"
    INTERNECPU = sgi
  endif
endif

#
# on cherche la valeur de l'OS
# uniquement pour alpha
#
ifeq "$(strip $(MYOS))" ""
  UNAMER = $(shell uname -r)
  ifeq "$(strip $(INTERNECPU))" "alpha"
    ifeq "$(strip $(UNAMER))" "V4.0"
      INTERNEOS = 4.0
    endif
    ifeq "$(strip $(UNAMER))" "V3.2"
      INTERNEOS = 3.2
    endif
  endif
else
  INTERNEOS = $(MYOS)
endif

#
# type d'objet, a priori sur sgi (pasteur) seulement
#
ifneq "$(strip $(OBJTYPE))" ""
  ifeq "$(strip $(INTERNECPU))" "sgi"
    INTERNEOBJTYPE = $(OBJTYPE)
  endif
endif

##############################
#
# REPERTOIRES
#
##############################
ifeq "$(strip $(INTERNEOBJTYPE))" ""
  BASEDIR = ${INTERNECPU}${INTERNEOS}
else
  BASEDIR = ${INTERNECPU}${INTERNEOS}/$(INTERNEOBJTYPE)
endif

#
# repertoire pour les objets
#
OBJDIR = obj/${BASEDIR}
#
# repertoire pour les librairies
#
LIBDIR = lib/${BASEDIR}
#
# repertoire pour les executables
#
BINDIR = bin/${BASEDIR}

#
# le repertoire courant
#
PWD=$(shell pwd)

INSTALLDIR =
#
# repertoire pour installer les librairies
#
INSTALLLIBDIR =

#
# repertoire pour installer les binaires
#
INSTALLBINDIR = 

#
# repertoire pour installer les includes
#
INSTALLHEADERSDIR =


##############################
#
# FICHIERS
#
##############################
CFILES =
C++FILES =
FILES =
CHEADERS =
C++HEADERS =
EXECS =
LIB =
LINKOBJS =

##############################
#
# DEPENDANCES
#
##############################
ALLWAYS_UPDATE_DEPEND=FALSE
MAKEDEPEND = makedepend
DEPFLAGS = -p$(OBJDIR)/
# fichier de dependances
DEPEND = ${OBJDIR}/dependencies



##############################
#
# GESTION DES REPERTOIRES
#
##############################
CREATE_DIRS=
SHELL=/bin/sh
UMASK=755


##############################
#
# OPTIONS DE PRECOMPILATION
#
##############################
#
# CPPFLAGS = -D_${INTERNECPU}_
CPPFLAGS =
ifeq "$(strip $(INTERNECPU))" "alpha"
  CPPFLAGS += -D_ALPHA_
endif
ifeq "$(strip $(INTERNECPU)$(INTERNEOS))" "alpha4.0"
  CPPFLAGS += -D__STDC__
endif
ifeq "$(strip $(INTERNECPU))" "linux"
  CPPFLAGS += -D_LINUX_
endif
ifeq "$(strip $(INTERNECPU))" "solaris"
  CPPFLAGS += -D_SOLARIS_
endif
ifeq "$(strip $(INTERNECPU))" "sgi"
  CPPFLAGS += -D_SGI_
endif

ifneq "$(strip $(INTERNEOBJTYPE))" ""
 CPPFLAGS += -D_$(INTERNEOBJTYPE)_
endif






#
# les differents types d'objets sur sgi (pasteur)
#
# 32_M2         - MIPS/ABI; 32 bit; mips2
# 32_ABI        - MIPS/ABI; 32 bit; mips1; ABI restrictions
# N32_M3        - new calling convention; 32 bit; mips3
# N32_M4        - new calling convention; 32 bit; mips4
# 64_M3         - new calling convention; 64 bit; mips3
# 64_M4         - new calling convention; 64 bit; mips4
# 32            - MIPS/ABI; 32 bit;
# N32           - new calling convention; 32 bit;
# 64            - new calling convention; 64 bit;
#
CSTYLE_      =
CSTYLE_32_M2 = -mips2 -o32
CSTYLE_32_ABI= -mips1 -o32 -abi
CSTYLE_N32_M3= -mips3 -n32
CSTYLE_N32_M4= -mips4 -n32
CSTYLE_R32   = -mips3 -r32
CSTYLE_64_M3 = -mips3 -64
CSTYLE_64_M4 = -mips4 -64
CSTYLE_32    = $(CSTYLE_32_M2)
CSTYLE_N32   = $(CSTYLE_N32_M3)
CSTYLE_64    = $(CSTYLE_64_M3)
CSTYLE = $(CSTYLE_$(INTERNEOBJTYPE))







##############################
#
# Compilateurs C et C++
#
##############################
# on definit quelques variables associees 
# a un compilateur

#
# compilateur par defaut
#
CC_cc        = cc
OPT_cc       = -O
CFLAGS_cc    = 

#
# compilateur C++ pour silicon
#
C++_CC       = CC
OPT++_CC     = -O -OPT:Olimit=2697
C++FLAGS_CC  = -woff 1155,1170,1460,1681,3280,3240
I++FLAGS_CC  = -I/usr/include/CC

#
# compilateur GNU
#
# -ansi : In C mode, support all ISO C89 programs. 
#         In C++ mode, remove GNU extensions that conflict with ISO C++. 
# -Wall : All of the above `-W' options combined ...
#         (see section 3.8 of the manual)
# -W    : Print extra warning messages for these events ..
#         (see section 3.8 of the manual)
# -Wtraditional (C only) 
#       Warn about certain constructs that behave differently in traditional 
#       and ISO C. Also warn about ISO C constructs that have no traditional 
#       C equivalent, and/or problematic constructs which should be avoided. 
# -fsigned-char 
#       Let the type char be signed, like signed char. 
# -fsigned-bitfields 
#       These options control whether a bit-field is signed or unsigned, 
#       when the declaration does not use either signed or unsigned...
# -frepo : Enable automatic template instantiation.
#
CC_gcc       = gcc
OPT_gcc      = -O
CFLAGS_gcc   = -ansi -Wall -fsigned-char -fsigned-bitfields

C++_g++      = g++
OPT++_g++    = -O
C++FLAGS_g++ = -ansi -Wall -fsigned-char -fsigned-bitfields
I++FLAGS_g++ = 





##############################
#
# OPTIONS GENERALES COMPILATION 
#
##############################
#
#
#
DO_NOT_CHECK_DISTANT_OBJS =

#
# RECHERCHE DES INCLUDES
#
# c'est la premiere affectation. Le '+=' permet de prendre en compte
# une valeur initiale eventuelle
#
IFLAGS += -I.

#
# option -rpath
#

RPFLAGS_PATH = 
RPFLAGS_GLOBAL_PATH =

RPFLAGS_linux   =
RPFLAGS_alpha   =
RPFLAGS_sgi     =
RPFLAGS_solaris =

#
# la mise a jour des RPFLAGS_* se fait dans GNUmakefile.rules
#

RPFLAGS = $(RPFLAGS_$(INTERNECPU))

#
# pour considerer les .c (sources C) comme des .C (sources C++)
#
cEQUALC=FALSE

##############################
#
# COMPILATION C
#
##############################
#
# COMPILATEUR C
#
CC_alpha    = $(CC_gcc)
CC_alpha3.2 = $(CC_gcc)
CC_alpha4.0 = $(CC_gcc)
CC_linux    = $(CC_gcc)
CC_sgi      = $(CC_cc)
CC_solaris  = $(CC_gcc)
#
CC = ${CC_${INTERNECPU}${INTERNEOS}}



#
# Optimisation
#
Opt_alpha    = ${OPT_${CC}}
OPT_alpha3.2 = ${OPT_${CC}}
OPT_alpha4.0 = ${OPT_${CC}}
OPT_linux    = ${OPT_${CC}}
OPT_solaris  = ${OPT_${CC}}
OPT_sgi      = -O -OPT:Olimit=2697
#
OPT = ${OPT_${INTERNECPU}${INTERNEOS}}



# OPTIONS POUR LE COMPILATEUR C
#
# -mieee : The Alpha architecture implements floating-point hardware 
#          optimized for maximum performance. It is mostly compliant 
#          with the IEEE floating point standard. However, for full 
#          compliance, software assistance is required. This option 
#          generates code fully IEEE compliant code except that the 
#          inexact-flag is not maintained (see below). If this option is
#          turned on, the CPP macro _IEEE_FP is defined during compilation. 
#          The option is a shorthand for: 
#          `-D_IEEE_FP -mfp-trap-mode=su -mtrap-precision=i -mieee-conformant'. 
#          The resulting code is less efficient but is able to correctly 
#          support denormalized numbers and exceptional IEEE values such as 
#          not-a-number and plus/minus infinity. Other Alpha  compilers 
#          call this option `-ieee_with_no_inexact'. 
#          (section 3.17.18 DEC Alpha Options of the GCC manual)
#
# NOTE: This option is important to read float values generated on other
#       architecture, unless you provide a robust way to read them.
#
CFLAGS_alpha    = ${CFLAGS_${CC}} -mieee
CFLAGS_alpha3.2 = ${CFLAGS_${CC}} -mieee
CFLAGS_alpha4.0 = ${CFLAGS_${CC}} -mieee
CFLAGS_linux    = ${CFLAGS_${CC}}
CFLAGS_solaris  = ${CFLAGS_${CC}}

#
# -ansiposix:  posix ansi C
# -woff:  turn off named warnings
#         warning 1110 corresponds to "statement is unreachable"
#                      in switches
#         warning 1429 corresponds to long long warning
# -signed:  characters are signed by default
CFLAGS_sgi = -ansiposix -woff 1048,1110,1429 -signed

#
CFLAGS = ${CFLAGS_${INTERNECPU}${INTERNEOS}}
# CFLAGS += $(CSTYLE)


#
# Recherche des includes
#
IFLAGS_alpha    = ${IFLAGS_${CC}}
IFLAGS_alpha3.2 = ${IFLAGS_${CC}}
IFLAGS_alpha4.0 = ${IFLAGS_${CC}}
IFLAGS_linux    = ${IFLAGS_${CC}}
IFLAGS_solaris  = ${IFLAGS_${CC}}
IFLAGS_sgi = 
IFLAGS += ${IFLAGS_${INTERNECPU}${INTERNEOS}}

#
# REGLES DE COMPILATION
#

COMPILE.c = $(CC) $(CPPFLAGS) $(CFLAGS) ${OPT} $(CSTYLE) ${IFLAGS} -c

#
# ajouts de $($@OBJS) 
# permet d'ajouter a l'edition de liens d'un executable, et que 
# pour cet executable, des objets qui ne seront pas dans la lib
#
# il faut rajouter dans le GNUmakefile, apres include GNUmakefile.rules
# fooOBJS = $(OBJDIR)/depend.o
# $(BINDIR)/foo foo : $(fooOBJS)
# EXECSOBJS += $(fooOBJS) # pour effacer
#
LINK.c = $(CC) ${OPT} $(CSTYLE) ${IFLAGS} \
  -o ${BINDIR}/$(notdir $@) ${OBJDIR}/$(notdir $@).o $(LINKOBJS) $($(notdir $@)OBJS) ${LDPATH} ${RPFLAGS} ${MYLDLIBS} ${LDLIBS}

##############################
#
# COMPILATION C++
#
##############################
#
# COMPILATEUR C++
#
C++_alpha    = $(C++_g++)
C++_alpha3.2 = $(C++_g++)
C++_alpha4.0 = $(C++_g++)
C++_linux    = $(C++_g++)
C++_sgi      = $(C++_CC)
C++_solaris  = $(C++_g++)
#
C++ = ${C++_${INTERNECPU}${INTERNEOS}}

#
# OPTIMISATION
#
OPT++_alpha    = $(OPT++_g++)
OPT++_alpha3.2 = $(OPT++_g++)
OPT++_alpha4.0 = $(OPT++_g++)
OPT++_linux    = $(OPT++_g++)
OPT++_sgi      = $(OPT++_CC)
OPT++_solaris  = $(OPT++_g++)
#
OPT++ = ${OPT++_${INTERNECPU}${INTERNEOS}}

#
# OPTIONS POUR LE COMPILATEUR C++
#
C++FLAGS_alpha    = ${C++FLAGS_g++} -mieee -frepo 
C++FLAGS_alpha3.2 = ${C++FLAGS_g++} -mieee -frepo 
C++FLAGS_alpha4.0 = ${C++FLAGS_g++} -mieee -frepo 
C++FLAGS_linux    = ${C++FLAGS_g++}
C++FLAGS_sgi      = ${C++FLAGS_CC}
C++FLAGS_solaris =  ${C++FLAGS_g++} -frepo 
#
C++FLAGS = ${C++FLAGS_${INTERNECPU}${INTERNEOS}}
# C++FLAGS += $(CSTYLE)

#
# RECHERCHE DES INCLUDES
#
I++FLAGS_alpha    = ${I++FLAGS_g++}
I++FLAGS_alpha3.2 = ${I++FLAGS_g++}
I++FLAGS_alpha4.0 = ${I++FLAGS_eg++}
I++FLAGS_linux    = ${I++FLAGS_eg++}
I++FLAGS_sgi      = ${I++FLAGS_CC}
I++FLAGS_solaris =  ${I++FLAGS_g++}
#
# c'est la premiere affectation. Le '+=' permet de prendre en compte
# une valeur initiale eventuelle
#
I++FLAGS += ${I++FLAGS_${INTERNECPU}${INTERNEOS}}

#
# REGLE DE COMPILATION
#

COMPILE.C = $(C++) $(CPPFLAGS) $(C++FLAGS) ${OPT++} $(CSTYLE) ${IFLAGS} ${I++FLAGS} -c

#LINK.C = $(C++) $(CPPFLAGS) $(C++FLAGS) ${OPT} ${IFLAGS} ${I++FLAGS} \
#  -o ${BINDIR}/$(notdir $@) $< ${LDPATH} ${RPFLAGS} ${LDLIBS}

LINK.C = $(C++) ${OPT++} $(CSTYLE) ${IFLAGS} ${I++FLAGS} \
  -o ${BINDIR}/$(notdir $@) ${OBJDIR}/$(notdir $@).o $(LINKOBJS) $($(notdir $@)OBJS) ${LDPATH} ${RPFLAGS} ${MYLDLIBS} ${LDLIBS}

LINK.cpp = $(C++) ${OPT++} $(CSTYLE) ${IFLAGS} ${I++FLAGS} \
  -o ${BINDIR}/$(notdir $@) ${OBJDIR}/$(notdir $@).o $(LINKOBJS) $($(notdir $@)OBJS) ${LDPATH} ${RPFLAGS} ${MYLDLIBS} ${LDLIBS}

LINK.cc = $(C++) ${OPT++} $(CSTYLE) ${IFLAGS} ${I++FLAGS} \
  -o ${BINDIR}/$(notdir $@) ${OBJDIR}/$(notdir $@).o $(LINKOBJS) $($(notdir $@)OBJS) ${LDPATH} ${RPFLAGS} ${MYLDLIBS} ${LDLIBS}





##############################
#
# LIBRAIRIE STATIQUE
#
##############################
#
# PROGRAMME D'ARCHIVAGE
#
AR = ar

#
# OPTIONS POUR L'ARCHIVAGE
#
ARFLAGS = rulv
#
# RANLIB
#
RANLIB_alpha   = 
RANLIB_linux   = ranlib
RANLIB_sgi     = 
RANLIB_solaris = ranlib
RANLIB = ${RANLIB_${INTERNECPU}}










#
# les differents types d'objets sur sgi (pasteur)
#
# 32_M2         - MIPS/ABI; 32 bit; mips2
# 32_ABI        - MIPS/ABI; 32 bit; mips1; ABI restrictions
# N32_M3        - new calling convention; 32 bit; mips3
# N32_M4        - new calling convention; 32 bit; mips4
# 64_M3         - new calling convention; 64 bit; mips3
# 64_M4         - new calling convention; 64 bit; mips4
# 32            - MIPS/ABI; 32 bit;
# N32           - new calling convention; 32 bit;
# 64            - new calling convention; 64 bit;
#
LSTYLE_      =
LSTYLE_32_M2 = -o32
LSTYLE_32_ABI= -o32
LSTYLE_N32_M3= -n32
LSTYLE_N32_M4= -n32
LSTYLE_R32   = -r32
LSTYLE_64_M3 = -64
LSTYLE_64_M4 = -64
LSTYLE_32    = $(LSTYLE_32_M2)
LSTYLE_N32   = $(LSTYLE_N32_M3)
LSTYLE_64    = $(LSTYLE_64_M3)
LSTYLE = $(LSTYLE_$(INTERNEOBJTYPE))


##############################
#
# LIBRAIRIE DYNAMIQUE
#
##############################
#
# edition de liens
#

LD_gcc     = gcc
LD_g++     = g++
LD_CC      = CC
#
LD = $(LD_$(C++))

#
# compilateur GNU
#
# -shared: Produce a shared object which can then be linked with other 
#          objects to form an executable. Not all systems support this option.
LDFLAGS_gcc = -shared
LDFLAGS_g++ = -shared

#
# -G : In dynamic mode only, produce a  shared  object.
#      Undefined symbols are allowed.
#      (from man page of solaris)
LDFLAGS_ld  = -G
LDFLAGS_CC  = -shared



#
# edition de lien
#
LD_alpha    = ${LD_g++}
LD_alpha3.2 = ${LD_g++}
LD_alpha4.0 = ${LD_g++}
LD_linux    = ${LD_g++}
LD_solaris  = ${LD_g++}
LD_sgi      = ${LD_CC}







#
# OPTIONS POUR L'ARCHIVAGE DYNAMIQUE
#
#
#
LD_LOCATION_FILE =

# LDFLAGS_alpha_ld    = -shared -all -check_registry $(LD_LOCATION_FILE) -update_registry $(LD_LOCATION_FILE)
# LDFLAGS_sgi_ld      = -shared -no_transitive_link -update_registry $(LD_LOCATION_FILE)
# LDFLAGS_solaris_ld  = $(LSTYLE) -G 

# from man ld (alpha)
# ...
#  -error_unresolved
#      Produce an error message and cause the link to fail when unresolved
#      symbols are encountered, except for those matching -expect_unresolved.
#      This is the default behavior for linking executable programs.
# ...
LDFLAGS_alpha    = ${LDFLAGS_${LD}}
ifeq "$(strip $(LD))" "gcc"
  LDFLAGS_alpha    += -error_unresolved
endif
ifeq "$(strip $(LD))" "g++"
  LDFLAGS_alpha    += -error_unresolved
endif

LDFLAGS_linux    = ${LDFLAGS_${LD}}

# from man ld (SunOS)
# ...
#     -t          Turn off the warning about multiply defined sym-
#                 bols that are not the same size.
# ...
#     -z defs     Force a fatal error  if  any  undefined  symbols
#                 remain  at  the  end  of  the link.  This is the
#                 default when an executable is built.  It is also
#                 useful  when  building a shared object to assure
#                 that the object is self-contained, that is, that
#                 all  its symbolic references are resolved inter-
#                 nally.
# ...
LDFLAGS_solaris  = ${LDFLAGS_${LD}}
ifeq "$(strip $(LD))" "gcc"
  LDFLAGS_solaris = -G -Wl,-zdefs -Wl,-t
endif
ifeq "$(strip $(LD))" "g++"
  LDFLAGS_solaris = -G -Wl,-zdefs -Wl,-t
endif
LDFLAGS_sgi      = ${LDFLAGS_${LD}}

LDFLAGS = $(LDFLAGS_$(INTERNECPU))


LD.c = ${LD_${CC}} ${LDFLAGS}
LD.C = ${LD_${C++}} ${LDFLAGS}
LD.cc = $(LD.C)
LD.cpp = $(LD.C)



#
# librairie a charger
#
LOADLIBSFORSHAREDLIB = 

##############################
#
# EDITION DE LIENS
#
##############################
#
# RECHERCHE DES LIBRAIRIES
#
LDPATH =

#
# librairies a charger
#
# LDLIBS =
MYLDLIBS =

##############################
#
# INSTALLATION
#
##############################
RSYNC=/usr/local/bin/rsync  --rsync-path /usr/local/bin/rsync
RSYNCHEADERSOPTIONS = -Rutv
RSYNCLIBOPTIONS = -ut
RSYNCBINOPTIONS = -ut

# -R use relative paths
# -b pre-existing files are renamed into *~
# -u --update : skip any pre-existing and more recent file
# -t --times : transfer modification times

CHMOD = chmod
CHMODOPTIONS = g+rw

##############################
#
# MISC
#
##############################
#
# delete the default suffixes
#
.SUFFIXES:

.PHONY: default defaulttarget clean clobber realclean install
.PHONY: installlib installheaders installexecs install
.PHONY: printaddons

default : defaulttarget

##############################
#
# LES TACHES A FAIRE
#
##############################
TARGETSTOBEDONE =


##############################
#
# FICHIERS A INCLURE
#
##############################
ADDONS_INCLUDED =

ifeq "$(strip $(ADDONSFILE))" ""
  ifeq "$(strip $(ADDONSVARSFILE))" ""
	ADDONSVARSFILE = Makefile.vars.addons
  endif
else
  ADDONSVARSFILE = $(ADDONSFILE)
endif

-include $(HOME)/share/$(ADDONSVARSFILE)
ADDONS_INCLUDED += $(HOME)/share/$(ADDONSVARSFILE)

ifneq "$(strip $(word 1, $(ADDONSDIR)))" "" 
ADDONS_INCLUDED += $(word 1, $(ADDONSDIR))/$(ADDONSVARSFILE)
-include $(word 1, $(ADDONSDIR))/$(ADDONSVARSFILE)
$(word 1, $(ADDONSDIR))/$(ADDONSVARSFILE) : ;
endif

ifneq "$(strip $(word 2, $(ADDONSDIR)))" "" 
ADDONS_INCLUDED += $(word 2, $(ADDONSDIR))/$(ADDONSVARSFILE)
-include $(word 2, $(ADDONSDIR))/$(ADDONSVARSFILE)
$(word 2, $(ADDONSDIR))/$(ADDONSVARSFILE) : ;
endif

ifneq "$(strip $(word 3, $(ADDONSDIR)))" "" 
ADDONS_INCLUDED += $(word 3, $(ADDONSDIR))/$(ADDONSVARSFILE)
-include $(word 3, $(ADDONSDIR))/$(ADDONSVARSFILE)
$(word 3, $(ADDONSDIR))/$(ADDONSVARSFILE) : ;
endif

ifneq "$(strip $(word 4, $(ADDONSDIR)))" "" 
ADDONS_INCLUDED += $(word 4, $(ADDONSDIR))/$(ADDONSVARSFILE)
-include $(word 4, $(ADDONSDIR))/$(ADDONSVARSFILE)
$(word 4, $(ADDONSDIR))/$(ADDONSVARSFILE) : ;
endif

ifneq "$(strip $(word 5, $(ADDONSDIR)))" "" 
ADDONS_INCLUDED += $(word 5, $(ADDONSDIR))/$(ADDONSVARSFILE)
-include $(word 5, $(ADDONSDIR))/$(ADDONSVARSFILE)
$(word 5, $(ADDONSDIR))/$(ADDONSVARSFILE) : ;
endif
