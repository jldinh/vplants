/* -*-c++-*-
 *  ----------------------------------------------------------------------------
 *
 *       PlantGL: Plant Graphic Library
 *
 *       Copyright 1995-2007 UMR Cirad/Inria/Inra Dap - Virtual Plant Team
 *
 *       File author(s): F. Boudon
 *
 *  ----------------------------------------------------------------------------
 *
 *                      GNU General Public Licence
 *
 *       This program is free software; you can redistribute it and/or
 *       modify it under the terms of the GNU General Public License as
 *       published by the Free Software Foundation; either version 2 of
 *       the License, or (at your option) any later version.
 *
 *       This program is distributed in the hope that it will be useful,
 *       but WITHOUT ANY WARRANTY; without even the implied warranty of
 *       MERCHANTABILITY or FITNESS For A PARTICULAR PURPOSE. See the
 *       GNU General Public License for more details.
 *
 *       You should have received a copy of the GNU General Public
 *       License along with this program; see the file COPYING. If not,
 *       write to the Free Software Foundation, Inc., 59
 *       Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 *  ----------------------------------------------------------------------------
 */

#include <plantgl/scenegraph/geometry/revolution.h>
#include <plantgl/scenegraph/geometry/curve.h>

#include <plantgl/python/export_refcountptr.h>
#include <plantgl/python/export_property.h>
#include "export_sceneobject.h"

PGL_USING_NAMESPACE
TOOLS_USING_NAMESPACE
using namespace boost::python;
using namespace std;

#define bp boost::python

DEF_POINTEE(Revolution)


void export_Revolution()
{
  class_< Revolution, RevolutionPtr, bases< SOR > , boost::noncopyable >
    ("Revolution", 
	  "Revolution describes a general surface of revolution generated by the rotation of a planar curve about the z -axis.\n"
	  "The number of points within the generatrice curve determines the number of subdivisions along the z -axis when discretizing the object. slice determine the number of evaluated vertical sections.",
	 init< Curve2DPtr, optional< uchar_t > >
               ("Revolution(profile [, slices])",
			   (bp::arg("profile"),bp::arg("slices")=Revolution::DEFAULT_SLICES))
			)
    .DEF_PGLBASE(Revolution)
    .DEC_PTR_PROPERTY(profile, Revolution, Profile, Curve2DPtr)
    ;


  implicitly_convertible< RevolutionPtr, SORPtr >();

}
