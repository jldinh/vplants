# -*- python -*-
# -*- coding: latin-1 -*-
#
#       pressure : mechanics package
#
#       Copyright or Â© or Copr. 2006 INRIA - CIRAD - INRA  
#
#       File author(s): Jerome Chopard <jerome.chopard@sophia.inria.fr>
#
#       Distributed under the Cecill-C License.
#       See accompanying file LICENSE.txt or copy at
#           http://www.cecill.info/licences/Licence_CeCILL-C_V1-en.html
# 
#       VPlants WebSite : https://gforge.inria.fr/projects/vplants/
#

__doc__ = """
This module provide a set of actors to represent pressure
"""

__license__ = "Cecill-C"
__revision__ = " $Id: division.py 116 2007-02-07 17:44:59Z tyvokka $ "

from numpy import array,cross
from numpy.linalg import norm
from actor import MechanicalActor

class PressureSegment (MechanicalActor) :
	"""apply pressure on a segment in 2D
	"""
	
	def __init__ (self, pid1, pid2, thickness, pressure) :
		"""Constructor
		
		.. warning:: the direction of the force due to pressure is defined by
		             the order of pid1 and pid2. The force F is such as
		             (pos[pid2] - pos[pid1]) ^ F > 0
		
		:Parameters:
		 - `pid1` (pid) - id of first extremity of the segment
		 - `pid2` (pid) - id of the second extremity
		 - `thickness` (float) - thickness of the segment
		 - `pressure` (float) - pressure acting on the segment
		"""
		self._pid1 = pid1
		self._pid2 = pid2
		self._thickness = thickness
		self._pressure = pressure
	
	####################################################
	#
	#	accessors
	#
	####################################################
	def extremities (self) :
		"""iterator on extremities
		
		:Returns Type: iter of pid
		"""
		yield self._pid1
		yield self._pid2
	
	def set_extremities (self, pid1, pid2) :
		"""Set extremal points
		
		:Parameters:
		 - `pid1` (pid) - id of first extremity
		 - `pid2` (pid) - id of second extremity
		"""
		self._pid1 = pid1
		self._pid2 = pid2
	
	def thickness (self) :
		"""Retrieves the thickness of the segment
		
		:Returns Type: float
		"""
		return self._thickness
	
	def set_thickness (self, thickness) :
		"""Set the thickness of the segment
		
		:Parameters:
		 - `thickness` (float) - thickness of the segment
		"""
		self._thickness = thickness
	
	def pressure (self) :
		"""Retrieves the pressure acting on the segment
		
		:Returns Type: float
		"""
		return self._pressure
	
	def set_pressure (self, pressure) :
		"""Set the pressure acting on the segment
		
		:Parameters:
		 - `pressure` (float) - in Pa
		"""
		self._pressure = pressure
	
	####################################################
	#
	#	mechanical computations
	#
	####################################################
	def assign_forces (self, forces, state, t = None) :
		"""Compute local forces and insert them into forces
		
		Compute local forces generated by this actor
		according to current state.
		
		:Parameters:
		 - `forces` (array of float) - an array that store force vectors
		 - `state` (array of float) - current position and velocity of points
		 - `t` (float) - current time
		
		:Return: None, modify forces in place
		"""
		#compute normal
		seg_dir = state[0,self._pid2,:] - state[0,self._pid1,:]
		fdir = array( (seg_dir[1],-seg_dir[0]) )
		if cross(seg_dir,fdir) < 0 :
			fdir *= -1
		
		#compute force
		F = fdir * (self._pressure * self._thickness / 2.)
		
		#assign force
		forces[self._pid1,:] += F
		forces[self._pid2,:] += F
	
	def assign_jacobian (self, jacobian, state, t = None) :
		"""Compute jacobian contribution of this actor
		
		:Parameters:
		 - `jacobian` (array of float) - an array that store jacobian
		 - `state` (array of float) - current position and velocity of points
		 - `t` (float) - current time
		
		:Return: None, modify jacobian in place
		"""
		return

class PressureTriangle (MechanicalActor) :
	"""apply pressure on a triangle in 3D
	"""
	
	def __init__ (self, pid1, pid2, pid3, pressure) :
		"""Constructor
		
		.. warning:: the direction of the force due to pressure is defined by
		   the order of pid1, pid2 and pid3. The force F is such that:
		      dot(cross(pos[pid2] - pos[pid1],pos[pid3] - pos[pid1],F) > 0
		
		:Parameters:
		 - `pid1` (pid) - id of first corner of the triangle
		 - `pid2` (pid) - id of the second corner
		 - `pid3` (pid) - id of the third corner
		 - `pressure` (float) - pressure acting on the triangle
		"""
		self._pid1 = pid1
		self._pid2 = pid2
		self._pid3 = pid3
		self._pressure = pressure
	
	####################################################
	#
	#	accessors
	#
	####################################################
	def extremities (self) :
		"""iterator on extremities
		
		:Returns Type: iter of pid
		"""
		yield self._pid1
		yield self._pid2
		yield self._pid3
	
	def set_extremities (self, pid1, pid2, pid3) :
		"""Set extremal points
		
		:Parameters:
		 - `pid1` (pid) - id of first extremity
		 - `pid2` (pid) - id of second extremity
		 - `pid3` (pid) - id of third extremity
		"""
		self._pid1 = pid1
		self._pid2 = pid2
		self._pid3 = pid3
	
	def pressure (self) :
		"""Retrieves the pressure acting on the triangle
		
		:Returns Type: float
		"""
		return self._pressure
	
	def set_pressure (self, pressure) :
		"""Set the pressure acting on the triangle
		
		:Parameters:
		 - `pressure` (float) - in Pa
		"""
		self._pressure = pressure
	
	def surface (self, state) :
		"""Compute the actual surface of this triangle
		
		:Parameters:
		 - `particules` (dict of (pid|Particule) )
		"""
		pt1 = state[0,self._pid1,:]
		pt2 = state[0,self._pid2,:]
		pt3 = state[0,self._pid3,:]
		
		return norm(cross(pt2 - pt1,pt3 - pt1) ) / 2.
	
	####################################################
	#
	#	mechanical computations
	#
	####################################################
	def assign_forces (self, forces, state, t = None) :
		"""Compute local forces and insert them into forces
		
		Compute local forces generated by this actor
		according to current state.
		
		:Parameters:
		 - `forces` (array of float) - an array that store force vectors
		 - `state` (array of float) - current position and velocity of points
		 - `t` (float) - current time
		
		:Return: None, modify forces in place
		"""
		#compute normal
		pos1 = state[0,self._pid1,:]
		pos2 = state[0,self._pid2,:]
		pos3 = state[0,self._pid3,:]
		
		fdir = cross( (pos2 - pos1),(pos3 - pos1) )
		
		#compute force
		F = fdir * (self._pressure / 2. / 3.)
		
		#assign force
		forces[self._pid1,:] += F
		forces[self._pid2,:] += F
		forces[self._pid3,:] += F
	
	def assign_jacobian (self, jacobian, state, t = None) :
		"""Compute jacobian contribution of this actor
		
		:Parameters:
		 - `jacobian` (array of float) - an array that store jacobian
		 - `state` (array of float) - current position and velocity of points
		 - `t` (float) - current time
		
		:Return: None, modify jacobian in place
		"""
		return






