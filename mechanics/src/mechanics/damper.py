# -*- python -*-
# -*- coding: latin-1 -*-
#
#       damper : mechanics package
#
#       Copyright or © or Copr. 2006 INRIA - CIRAD - INRA  
#
#       File author(s): Jerome Chopard <jerome.chopard@sophia.inria.fr>
#
#       Distributed under the Cecill-C License.
#       See accompanying file LICENSE.txt or copy at
#           http://www.cecill.info/licences/Licence_CeCILL-C_V1-en.html
# 
#       VPlants WebSite : https://gforge.inria.fr/projects/vplants/
#

__doc__ = """
This module provide an interface for dampers
"""

__license__= "Cecill-C"
__revision__=" $Id: damper.py 7874 2010-02-08 18:22:10Z cokelaer $ "

from actor import MechanicalActor

class Damper (MechanicalActor) :
	"""Interface for all damper objects
	
	"""
	def assign_forces (self, forces, state, t = None) :
		"""Compute local forces and insert them into forces
		
		Compute local forces generated by this actor
		according to current state.
		
		:Parameters:
		 - `forces` (array of float) - an array that store force vectors
		 - `state` (array of float) - current position and velocity of points
		 - `t` (float) - current time
		
		:Return: None, modify forces in place
		"""
		raise NotImplementedError
	
	def assign_jacobian (self, jacobian, state, t = None) :
		"""Compute jacobian contribution of this actor
		
		:Parameters:
		 - `jacobian` (array of float) - an array that store jacobian
		 - `state` (array of float) - current position and velocity of points
		 - `t` (float) - current time
		
		:Return: None, modify jacobian in place
		"""
		raise NotImplementedError
	
	##########################################
	#
	#		scipy integrator interface
	#
	##########################################
	def scipy_energy (self, t, state) :
		"""Compute the elastic energy stored in the spring
		
		:Parameters:
		 - `t` (float) - current time
		 - `state` (array of float) - current position and velocity of points
		
		:Returns Type: float
		"""
		raise NotImplementedError
	
	def scipy_forces (self, t, state, forces) :
		"""Compute local forces and insert them into forces
		
		Compute local forces generated by this spring
		according to current state.
		
		:Parameters:
		 - `t` (float) - current time
		 - `state` (array of float) - current position and velocity of points
		 - `forces` (array of float) - an array that store force vectors
		
		:Return: None, modify forces in place
		"""
		raise NotImplementedError

class ViscousDamper (Damper) :
	"""Damp all particules according to their speed
	"""
	def __init__ (self, pids, damping) :
		"""Constructor
		
		Initialise damper parameters.
		
		:Parameters:
		 - `pids` (list of pid) - id of particules
		 - `damping` (float) - damping coefficient (N.m-1.s)
		"""
		Damper.__init__(self)
		
		self._pids = pids
		self._damping = damping
	
	##########################################
	#
	#		accessors
	#
	##########################################
	def damping (self) :
		"""Retrieve damping coefficient
		
		unit: N.m-1.s
		
		:Returns Type: float
		"""
		return self._damping
	
	def set_damping (self, damping) :
		"""Set the damping coefficient
		
		:Parameters:
		 - `damping` (float)
		"""
		self._damping = damping
	
	##########################################
	#
	#		mechanics computations
	#
	##########################################
	def assign_forces (self, forces, state, t = None) :
		"""Compute local forces and insert them into forces
		
		Compute local forces generated by this actor
		according to current state.
		
		:Parameters:
		 - `forces` (array of float) - an array that store force vectors
		 - `state` (array of float) - current position and velocity of points
		 - `t` (float) - current time
		
		:Return: None, modify forces in place
		"""
		damping = self._damping
		
		for pid in self._pids :
			forces[pid,:] -= state[1,pid,:] * damping
	
	def assign_jacobian (self, jacobian, state, t = None) :
		"""Compute jacobian contribution of this actor
		
		:Parameters:
		 - `jacobian` (array of float) - an array that store jacobian
		 - `state` (array of float) - current position and velocity of points
		 - `t` (float) - current time
		
		:Return: None, modify jacobian in place
		"""
		damping = self._damping
		dim = state.shape[2]
		
		for pid in self._pids :
			for i in range(dim) :
				jacobian[1,pid,i,1,pid,i] = - damping
	
	##########################################
	#
	#		scipy integrator interface
	#
	##########################################
	def scipy_forces (self, t, state, forces) :
		"""Compute local forces and insert them into forces
		
		Compute local forces generated by this spring
		according to current state.
		
		:Parameters:
		 - `t` (float) - current time
		 - `state` (array of float) - current position and velocity of points
		 - `forces` (array of float) - an array that store force vectors
		
		:Return: None, modify forces in place
		"""
		damping = self._damping
		
		for pid in self._pids :
			forces[pid,:] -= state[1,pid,:] * damping
	
	def scipy_jacobian (self, t, state, jacobian) :
		"""Compute jacobian contribution of this actor
		
		:Parameters:
		 - `t` (float) - current time
		 - `state` (array of float) - current position and velocity of points
		 - `jacobian` (array of float) - an array that store jacobian
		
		:Return: None, modify forces in place
		"""
		damping = self._damping
		dim = state.shape[2]
		
		for pid in self._pids :
			for i in range(dim) :
				jacobian[1,pid,i,1,pid,i] = - damping

class ViscousDamper2D (ViscousDamper) :
	pass

class ViscousDamper3D (ViscousDamper) :
	pass


