dt = 0.2
maxlilength = 2
positions = []


def StartEach():  
  useGroup(getGroup()%2 +1)
  print 'group',getGroup()
  global positions
  positions = []

def EndEach():
  if getGroup() == 2:
    print len(positions)


Axiom: A

derivation length: 12
production:

group 1: # growth

A --> ?P() I(dt)/(137.5)[+A][-A] A
I(t) --> I(t+dt)


group 2: # position retrieval

?P(p) I(t):
    global positions
    positions.append(p) 

group 0:
interpretation:

I(t) --> _(idiam(min(1.0,t))/10.) F(maxlilength*ilength(min(1.0,t)))
?P(p) --> [,(3)@D(1.1)@O]

endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	context.animation_timestep = 0.262
	context.options.setSelection('Early return when no matching',0)
	import openalea.plantgl.all as pgl
	ilength = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.0769619, 1),(0.543139, 0.181159, 1),(0.800964, 0.707373, 1),(1, 1.02556, 1)]) , 
	    )
	ilength.name = "ilength"
	idiam = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.0562771, 1),(0.324675, 0.298701, 1),(0.588745, 0.532467, 1),(1, 0.679654, 1)]) , 
	    )
	idiam.name = "idiam"
	panel_0 = ({'active': True, 'visible': True, 'name': 'Panel 1'},[('Function',ilength),('Function',idiam)])
	parameterset = [panel_0,]
	context["__functions__"] = [('ilength',ilength),('idiam',idiam),]
	context["__curves__"] = []
	context["__parameterset__"] = parameterset
	context["ilength"] = pgl.QuantisedFunction(ilength)
	context["idiam"] = pgl.QuantisedFunction(idiam)
