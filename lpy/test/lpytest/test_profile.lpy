from random import randint,seed
from openalea.plantgl.all import *

seed(0)
p = profile.deepcopy()


steps = 10
dt = 1/float(steps+1)

Axiom: SetColor(2) SetContour(p) _(leafwidth(0)) StartGC() A(dt) 

derivation length: steps
production:

A(x) :
    x = min(0.9999,x)
    a = angle(axis.getTangentAt(x),axis.getTangentAt(x+dt))
    print x
    produce &(a)_(leafwidth(x))F(0.1)A(x+dt)

homomorphism:


endlsystem
###### INITIALISATION ######

def __initialiseContext__(context):
	from openalea.plantgl.all import QuantisedFunction,NurbsCurve2D,Point3Array,Vector3,RealArray
	functions = [('leafwidth', NurbsCurve2D(Point3Array([Vector3(0,0.0195927,1),Vector3(0.219872,0.279019,1),Vector3(0.711105,0.460335,1),Vector3(1,0.00849109,1)])))]
	context["__functions__"] = functions
	for n,c in functions:
		context[n] = QuantisedFunction(c)
	curves = [('profile', NurbsCurve2D(Point3Array([Vector3(-0.617641,0.141492,1),Vector3(-0.175383,-0.129256,1),Vector3(0.00813704,0.352579,1),Vector3(0.122072,-0.121707,1),Vector3(0.587932,0.164599,1)]))), ('axis', NurbsCurve2D(Point3Array([Vector3(-0.5,0,1),Vector3(-0.142762,0.302789,1),Vector3(0.166667,0,1),Vector3(0.5,0,1)])))]
	context["__curves__"] = curves
	for n,c in curves:
		context[n] = c
