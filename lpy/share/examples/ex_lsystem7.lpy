STEPS = 1 
PL = 6 # plastochrone #
NR1 = 4  # number of segements per internode #
NR2 = 12  # number of segments per internode #
INR = 4 # Number of segments created after branch #
DL = 79 # delay before insect attack #
E0 = 0.1
EI = 0.01
EM = -0.5
SI = 1.5
SINC = 0.25
# bud #
BSC = 0.007

Wscale = 0.25
Iscale = 0.25

GL = 90  # lenght of the ground on each side #
c = SI+2*SINC
n = 1
s = 0

def Start():
	global c,n
	print("Start")
	c=SI+2*SINC
	n = 1

def StartEach():
	global s,n
	s=0
	#print("Step "+str(n))
	n=n+1

def EndEach():
	global s
	s=1

derivation length: STEPS

ignore: [+-eWI/!;

Axiom: [_(1),(3)+(90)f(GL)[-(180)F(2*GL)][-(90)f(1)-(90)f(0.5,0)/(70)h]]SM

production:
f(m,t)/(n)h : 
	if m >= GL-0.5 :
		produce *

f(m,t)--> f(m+(GL-1)/(DL+0.5),t)

S --> E/(30)+(10);(1,0)!(1*Wscale,0.015*Wscale)e(E0,0)d(DL)A(0,NR1)B

E > g -->  [f(2)-(90)f(0.5,0)/(70)h]

d(n) :
	# delay for releasing the bug
	if n>0 : 
		produce d(n-1) 
	else:
		produce f

f < F > * --> f
f < 0 > * --> 1
1 < aF > * --> f
f < A(n,m) > * :
	global c
	c=c+SINC
	produce Yf%

* < F > Y --> g
* < F > g --> g
* < 2 > g --> 3
3 < bF > * --> f
* < 4 > g --> 5
* < 4 > F=]g --> 5
* < F > 5 --> g 
* < f > * --> F
* < g > * --> F
* < 1 > * --> 2
* < 3 > * --> 4
* < 5 > * --> 6
* < Y > * --> *

* < e(e,i) > g --> e(e,EI)
* < e(e,i) > * : 
	if e>EM :
		produce e(e-i,i)

+(i,j) > g --> +(i+1,1)
+(i,j) : 
	if i < 30 :
		produce +(i+j,j)

!(d,i) > g --> !(d,0)
!(d,i) --> !(d+i,i)

;(d,i) > g --> ;(d,1)
;(d,i) : 
	if d < 32 :
		produce ;(d+i,i)

A(n,m)B : 
	if n == 0 and m == 0 :
		produce I(PL,INR)/(90)0+(0,0)[;(1,0)!(1*Wscale,0.020*Wscale)e(E0,0)+aFA(PL,NR1)B][;(1,0)!(1*Wscale,0.010*Wscale)e(E0,0)-bFA(PL,NR2)B][--L][++L]

A(n,m) :
	# in the absence of the bug, a branch  is created #
	if n > 0 :
		produce A(n-1,m)
	elif n == 0 and m > 0 :
		produce FA(PL,m-1)


L --> [{.g(0)[&g(0).][g(0)g(0)g(0).]^g(0).}] 

I(n,m) : 
	if m > 0:
		if n>0 : 
			produce I(n-1,m)
		elif n==0 :
			produce FI(PL,m-1)

g(i) : 
	if i<1.5 : 
		produce g(i+0.1)

homomorphism: 

B --> ;(4)@O(BSC)

1 --> [;(4)!(2*Iscale)@O(c)[-F(c)++F(c/2)]+F(c)--F(c/2)]f
3 --> [;(4)!(2*Iscale)@O(c)[-F(c)++F(c/2)]+F(c)--F(c/2)]f
5 --> [;(4)!(2*Iscale)@O(c)[-F(c)++F(c/2)]+F(c)--F(c/2)]f
f --> [e(0);(4)!(2*Iscale)@O(c)[-F(c)++F(c/2)]+F(c)--F(c/2)]f
h --> [e(0);(4)!(2*Iscale)@O(c)[-F(c)++F(c/2)]+F(c)--F(c/2)]f
g --> g[;(4)|!(2*Iscale)@O(c)[-F(c)++F(c/2)]+F(c)--F(c/2)]

H(n,m) --> ;(2){-F(2)++F(2)-|-F(2)++F(2)-}

endlsystem
