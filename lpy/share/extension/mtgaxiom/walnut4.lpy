from openalea.plantgl.all import norm,Vector3, dot, angle, direction

import mtgimport as mi
reload(mi)

import mtgcompare as mc
reload(mc)

from openalea.mtg.io import axialtree2mtg


from  random import randint, seed, uniform, random
from math import degrees
from numpy import mean


dseg = 4.

nbiter = 4 if COMPARE else 3
avgnodelength = 10.64


class MatchingType:
  def __init__(self,value):
    self.matching = value

UnMatched = MatchingType(False)
Matched   = MatchingType(True)

class MatchingProp:
  def __init__(self,value):
    self.value = value
  def __repr__(self):
    return 'MatchingProp('+repr(self.value)+')'

def matchingcolor(arg,defaultval,threshold = 0.8):
  if arg == [] : return defaultval
  else:
    if isinstance(arg[0],MatchingProp) : 
      if arg[0].value >= threshold : return 20
      else: return 10
      #return 10 + int(10*arg[0].value)
      #return 10 + int(10*(arg[0].value-0.70)/0.15)
    elif arg[0] == UnMatched: return 4
    else: return 1

module Init, LeafSet


module B(position3,topdiameter) : scale = 1
module S,U,V : base = B

module K(newdir,length,topdiam,botdiam) : scale = 1
module W,Z : base = K

module Bud

exported_symbols = 'SUVWZ'
initialmtg = None
result = None

def Start():
    global initialmtg
    initialmtg = mi.read_mtg()
    mi.color_last_year_node(initialmtg)

def End(lstring,scene):
  pass

def StartEach():    
    seed(SEED)
    context().turtle.setMaterial(1,context().turtle.getMaterial(7 if getIterationNb() != 3 else 8))
    if REGENERATE:
      groupChanged = {1 : 1, 2 :2, 3 : 3}
      try:      
        useGroup(groupChanged[getIterationNb()])
        print getIterationNb(),groupChanged[getIterationNb()]
      except:
        pass
    #print getIterationNb()
    


def EndEach(lstring):
  if getIterationNb() == 3:
    if COMPARE :
      compare(lstring)
    else:
      mtg = export_to_mtg(lstring)
      print len(initialmtg),len(mtg)

comparison_fname = 'comparison.pkl'
comparisoni_fname = 'comparisoncache/ncomparison%i.pkl'%RAMIF
def dump(map,fname = comparisoni_fname):
   import pickle
   f = file(fname,'w')
   pickle.dump(map,f)
   f.close()

def load(fname = comparisoni_fname):
   import pickle
   f = file(fname,'r')
   return pickle.load(f)

def check_dump(fname = comparisoni_fname):
   import os
   return os.path.exists(fname)

def compare(lstring):
  print 'compare'
  mtg = export_to_mtg(lstring)
  print 'MTG:',len(initialmtg),len(mtg)
  if check_dump() and not FORCE_COMPARE:
    val,map = load()
  else:
    val,map = compute_comparison(mtg,lstring)
    dump((val,map))
  print 'Comparison : ',val,len(mtg)-len(map)
  if PROP_VIEW:
    set_matching_proportion_tag(lstring,mtg,map)
  else:
    set_matching_tag(lstring,map)
  print 'done'

def compute_comparison(resultingmtg,lstring):
  MainBranchRoots = getmainbranches(lstring)
  idmap = resultingmtg.property('_axial_id')
  idmap1 = dict([(j,i) for i,j in idmap.iteritems()])
  MainBranchRoots = [idmap1[i] for i in MainBranchRoots]
  InitialMainBranchRoots = getinitialmainbranches(initialmtg)
  
  totval,totmatching = 0,[]
  for r1,r2 in zip(InitialMainBranchRoots,MainBranchRoots):
    val,matching = mc.compare(initialmtg,resultingmtg,root1=r1,root2=r2)  
    totval += val
    totmatching += [set([idmap[r] for i,r,v in matching])]
  return totval,totmatching
    

def set_matching_tag(lstring,map):
  for i,m in enumerate(lstring):
    if m.name in 'WZ':
      if i in map:
        m.append(Matched)
      else:
        m.append(UnMatched)

def set_matching_proportion_tag(lstring,mtg,map):
  global result
  MainBranchRoots = getmainbranches(lstring)
  InitialMainBranchRoots = getinitialmainbranches(initialmtg)
  
  idmap = dict([(j,i) for i,j in mtg.property('_axial_id').iteritems()])
  map2 = [set([idmap[i] for i in j]) for j in map]
  mtgrootids = [idmap[i] for i in MainBranchRoots]
  propmap = mc.getproportion(mtg,mtgrootids,initialmtg,InitialMainBranchRoots,map2)
  propmap = dict([(mtg.property('_axial_id')[i],j) for i,j in propmap.iteritems()])
  print propmap
  result = propmap
  print 'Tot prop:',mean(propmap.values())
  for r in MainBranchRoots:
    p = propmap[r]
    mp = MatchingProp(p)
    l = [r]
    while len(l) > 0:
      n = l.pop(0)
      a = lstring[n]      
      if a.name in 'WZS':
        a.append(mp)
      m = lstring.sons(n)
      if not m is None: 
        if isinstance(m,int): l += [m]
        else: l += m


def export_to_mtg(lstring):
  parameters = {}
  scales = {}
  for m in exported_symbols:
    mod = ModuleClass.get(m)
    scales[m] = mod.scale
    parameters[m] = mod.parameterNames
  return axialtree2mtg(lstring,scales,None,parameters)



def directlength(n,originalpos):
    nbsons = 1
    while not n is None:
      ln = n
      n = n.direct_child()
      nbsons += 1
    dir = ln[0] - originalpos
    return norm(dir),nbsons
    
def nbLateralSons(it):
  latsons = it.lateral_children()
  if latsons is None: 
    return 0,0.0,0
  nbsons = len(latsons)
  lgts = [directlength(s,it[0]) for s in latsons]
  avgl = mean([i[0] for i in lgts])
  avgnb = mean([i[1] for i in lgts])
  return nbsons, avgl, avgnb


def getmainbranches(lstring,fid=42):
  return detectmainbranches(fid, lambda x :lstring.parent(x), lambda x :  lstring.children(x))
#  mb = [fid]
#  pid = lstring.father(fid)
#  pid2 = lstring.sons(pid)[1]
#  br,pid2 = lstring.sons(pid2)
#  mb.append(br)
#  br,pid2 = lstring.sons(pid2)
#  mb.append(br)
#  br,pid2 = lstring.sons(pid2)
#  mb.append(br)
#  mb += lstring.sons(pid2)
#  return mb

def getinitialmainbranches(mtg,fid = 21):
  return detectmainbranches(fid, lambda x : mtg.parent(x), lambda x : list(mtg.children(x)))

def detectmainbranches(fid,funcparent,funcchildren):
  mb = [fid]
  pid = funcparent(fid)
  pid2 = funcchildren(pid)[1]
  br,pid2 = funcchildren(pid2)
  mb.append(br)
  br,pid2 = funcchildren(pid2)
  mb.append(br)
  br,pid2 = funcchildren(pid2)
  mb.append(br)
  mb += funcchildren(pid2)
  return mb
  
  
#MainBranchRoots = [42, 1846, 6263, 8220, 10666, 13271]

Axiom:     @Tp(0,0,-1 if TROPISM < 50 else 1) @Gc  Init 

derivation length: nbiter
production:

Init : 
  # nproduce P
  #global initialmtg
  #initialmtg = initialmtg.sub_mtg(1555)
  myaxiom = mi.construct_lstring(initialmtg)
  if DETAILS:
    nroot = 2467
    es = myaxiom.endBracket(nroot)
    p = myaxiom.parent(nroot)
    ppos = myaxiom[p][0]  
    myaxiom = myaxiom[nroot:es]
    for m in myaxiom:
      if len(m) > 1 and type(m[0]) == Vector3: m[0] -= ppos
    print len(myaxiom),
    subcut = 130
    es = myaxiom.endBracket(subcut)
    del myaxiom[subcut:es+1]
    print len(myaxiom)
    
  assert myaxiom.wellBracketed()
  nsproduce(myaxiom)

group 1: # pruning

U(p,d) --> %

S(p0,d0,mi) < $V(it): 
  p,d = it[0],it[1]
  nbdsons = 1
  latsons = []
  while not it is None and it.name == 'V':
    lit = it
    latsons.append(nbLateralSons(it))
    it = it.direct_child()
    nbdsons += 1
  vpos = lit[0]
  vtdiam = lit[1]
  dr = vpos - p0    
  l = norm(dr)
  if l > 0.001: 
    dr = direction(dr)
    avglatsons = [mean([i for i,j,k in latsons]),mean([j for i,j,k in latsons]),mean([k for i,j,k in latsons])]
    vinfo = (dr,l,d,vtdiam,nbdsons,avglatsons) 
    
    nbdsons2 = 1
    latsons = []
    while not it is None and it.name == 'U':
      lit = it
      latsons.append(nbLateralSons(it))
      it = it.directSon()
      nbdsons2 += 1
    upos = lit[0]
    dr2 = upos - vpos
    l2 = norm(dr2)
    avglatsons = [mean([i for i,j,k in latsons]),mean([j for i,j,k in latsons]),mean([k for i,j,k in latsons])]
    uinfo = (dr2,l2,vtdiam,lit[1],nbdsons2,avglatsons)
   
    # print dr
    produce Bud(vinfo,uinfo)

V(p,d) --> %

group 2: # growth

% --> 

Bud(vinfo,uinfo) :
  ndir,l,d,tdiam,nbdsons,avglatsons = vinfo
  avglats, avglatl, avglatnb = avglatsons
  l = l / nbdsons
  nproduce @Ge   _(d/2) PinpointRel(ndir[0],ndir[1],ndir[2])
  bdiam = d
  prob = RAMIF/100.
  for i in xrange(nbdsons):
    lgth = uniform(l*0.8,l*1.2)
    tpdiam = d+i*(tdiam-d)/(nbdsons-1)
    nproduce  W(ndir, lgth,tpdiam,bdiam)
    bdiam = tpdiam
    if random() < prob:
       nb = round(avglatnb*.9)
       nproduce  [ /(137.5*i) +(60) 
       for i in xrange(nb):
         nproduce Z(ndir, uniform(avglatl/(2*nb), 3*avglatl/(2*nb)) ,tdiam/2,bdiam/2)
       nproduce ]
  ndir,l,d,tdiam,nbdsons,avglatsons = uinfo
  avglats, avglatl, avglatnb = avglatsons
  l = l / nbdsons
  bdiam = tpdiam
  nproduce @Ge @Gc   PinpointRel(ndir[0],ndir[1],ndir[2])
  for i in xrange(nbdsons*.9):
    lgth = uniform(l*0.8,l*1.2)
    tpdiam = d+i*(tdiam-d)/(nbdsons-1)
    nproduce  Z(ndir, lgth,tpdiam,bdiam)
    bdiam = tpdiam
    if random() < avglats:
       nb = round(avglatnb)
       nproduce  [ /(137.5*i) +(60) 
       for i in xrange(nb):
         nproduce Z(ndir, uniform(avglatl/(2*nb), 3*avglatl/(2*nb)) ,tdiam/2,bdiam/2)
       nproduce ]


group 3:

[] --> 

group 0:

interpretation:
maximum depth: 3



S(oldpos,topdiameter0,mid0,*arg0) < S(position,topdiameter,mid,*arg) :
    newdir = position-oldpos
    l = newdir.normalize()
    nproduce PinpointRel(newdir[0],newdir[1],newdir[2]) ,(matchingcolor(arg,1))
    if l > 0:
      if WITH_TROPISM:
        nbseg,lastseg = divmod(l,dseg)
        basediam = topdiameter0/2
        ddiam = (topdiameter - topdiameter0) / (2 * l)
        for i in xrange(int(nbseg)): nproduce F(dseg,basediam+ddiam*dseg*i)
        if lastseg > 0: produce F(lastseg,topdiameter/2)
      else:
        produce F(l,topdiameter/2)

S(oldpos,topdiameter0,mid0,*arg0) < [ S(position,topdiameter,mid,*arg) : 
    nproduce [ @Ts(abs(TROPISM-50)/500.) _(topdiameter/2) ,(matchingcolor(arg,1))
    newdir = position-oldpos
    l = newdir.normalize()
    nproduce PinpointRel(newdir[0],newdir[1],newdir[2])
    if WITH_TROPISM:
      nbseg,lastseg = divmod(l,dseg)
      for i in xrange(int(nbseg)): nproduce F(dseg)
      if lastseg > 0: produce F(lastseg)
    else:
       produce F(l)

S(position,topdiameter,mid) -->  PinpointRel(position[0],position[1],position[2]) _(topdiameter/2) @Gc OLineRel(position[0],
                                      position[1],
                                      position[2],topdiameter/2)

*(pn,oldpos,olddiam,*arg) < [ *(n in 'UV',position,topdiameter) :
    nproduce [
    if OLDSTRUCTURE : produce 
    if pn != n:
      nproduce  @Ge _(topdiameter) @Gc  ,(2 if n is 'U' else 3) 
    newdir = position-oldpos
    l = newdir.normalize()
    nproduce PinpointRel(newdir[0],newdir[1],newdir[2]) LeafSet(l,topdiameter,olddiam,WITH_TROPISM)

*(pn,oldpos,olddiam,*arg) < *(n in 'UV',position,topdiameter) :
    if OLDSTRUCTURE : produce 
    if pn != n:
      nproduce @Ge @Gc ,(2 if n is 'U' else 3) 
    newdir = position-oldpos
    l = newdir.normalize()
    nproduce PinpointRel(newdir[0],newdir[1],newdir[2]) LeafSet(l,topdiameter,olddiam,WITH_TROPISM)

Z(newdir,l,tdiam,bdiam,*matched) --> ,(matchingcolor(matched,2)) @Ge  K(l,tdiam,bdiam)
W(newdir,l,tdiam,bdiam,*matched) --> ,(matchingcolor(matched,3)) @Ge  K(l,tdiam,bdiam)

K(l,tdiam,bdiam):
    produce LeafSet(l,tdiam,bdiam,GENERATED_WITH_TROPISM) 
    if not GENERATED_WITH_TROPISM:
          nproduce F(l,tdiam/2)
    else:
          nbsegment,lastseg = divmod(l,dseg)
          basediam = bdiam/2.
          ddiam = (tdiam - bdiam) / (2 * l)
          for i in xrange(int(nbsegment)): 
            nproduce F(dseg,basediam+(ddiam*dseg*i))
          if lastseg > 0: produce F(lastseg,tdiam/2)
      
  



M(l) --> ,(3)LeafSet(l,None)

LeafSet(l,topdiameter,basediameter,tropism) :
  if l > 0:
    nbsegment,lastseg = divmod(l,dseg)
    if WITHLEAF:
      nproduce [ @Ge SectionResolution(4) _(0.1)
      for i in xrange(int(nbsegment)):
        nproduce f(dseg)/(137)[&(60) 
        nproduce F(2)[+(60) ^(10) ~l(5)][-(60) ^(10) ~l(5)]
        nproduce F(5)[+(60)~l(5)][-(60)~l(5)]
        nproduce F(2) ^(10) ~l(5) ]
      nproduce ]
    # if topdiameter is None: produce F(l)
    # else : produce F(l,topdiameter/2)  
    if tropism:
          basediam = basediameter/2
          ddiam = (topdiameter - basediameter) / (2 * l)
          for i in xrange(int(nbsegment)): nproduce F(dseg,basediam+ddiam*dseg*i)
          if lastseg > 0: produce F(lastseg,topdiameter/2)
    else:	
          produce F(l,topdiameter/2)

Bud(dir,diam) --> ,(3) @O(3)


endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_1 = pgl.Material("Color_1" , ambient = (65,45,15) , diffuse = 3 , )
	Color_1.name = "Color_1"
	context.turtle.setMaterial(1,Color_1)
	Color_4 = pgl.Material("Color_4" , ambient = (0,0,127) , diffuse = 1.09449 , )
	Color_4.name = "Color_4"
	context.turtle.setMaterial(4,Color_4)
	Color_5 = pgl.Material("Color_5" , ambient = (60,60,15) , diffuse = 3 , )
	Color_5.name = "Color_5"
	context.turtle.setMaterial(5,Color_5)
	Color_6 = pgl.Material("Color_6" , ambient = (78,0,117) , diffuse = 1.53846 , specular = (0,0,0) , )
	Color_6.name = "Color_6"
	context.turtle.setMaterial(6,Color_6)
	Color_7 = pgl.Material("Color_7" , ambient = (65,45,15) , diffuse = 3 , )
	Color_7.name = "Color_7"
	context.turtle.setMaterial(7,Color_7)
	Color_8 = pgl.Material("Color_8" , ambient = (0,0,0) , diffuse = 3 , specular = (0,0,0) , shininess = 0 , )
	Color_8.name = "Color_8"
	context.turtle.setMaterial(8,Color_8)
	Color_10 = pgl.Material("Color_10" , ambient = (0,0,255) , diffuse = 0 , specular = (0,0,0) , shininess = 0 , )
	Color_10.name = "Color_10"
	context.turtle.setMaterial(10,Color_10)
	Color_11 = pgl.Material("Color_11" , ambient = (63,63,207) , diffuse = 0 , specular = (0,0,0) , shininess = 0 , )
	Color_11.name = "Color_11"
	context.turtle.setMaterial(11,Color_11)
	Color_12 = pgl.Material("Color_12" , ambient = (127,127,159) , diffuse = 0 , specular = (0,0,0) , shininess = 0 , )
	Color_12.name = "Color_12"
	context.turtle.setMaterial(12,Color_12)
	Color_13 = pgl.Material("Color_13" , ambient = (191,191,111) , diffuse = 0 , specular = (0,0,0) , shininess = 0 , )
	Color_13.name = "Color_13"
	context.turtle.setMaterial(13,Color_13)
	Color_14 = pgl.Material("Color_14" , ambient = (255,255,63) , diffuse = 0 , specular = (0,0,0) , shininess = 0 , )
	Color_14.name = "Color_14"
	context.turtle.setMaterial(14,Color_14)
	Color_15 = pgl.Material("Color_15" , ambient = (255,212,52) , diffuse = 0 , specular = (0,0,0) , shininess = 0 , )
	Color_15.name = "Color_15"
	context.turtle.setMaterial(15,Color_15)
	Color_16 = pgl.Material("Color_16" , ambient = (255,170,42) , diffuse = 0 , specular = (0,0,0) , shininess = 0 , )
	Color_16.name = "Color_16"
	context.turtle.setMaterial(16,Color_16)
	Color_17 = pgl.Material("Color_17" , ambient = (255,127,31) , diffuse = 0 , specular = (0,0,0) , shininess = 0 , )
	Color_17.name = "Color_17"
	context.turtle.setMaterial(17,Color_17)
	Color_18 = pgl.Material("Color_18" , ambient = (255,85,21) , diffuse = 0 , specular = (0,0,0) , shininess = 0 , )
	Color_18.name = "Color_18"
	context.turtle.setMaterial(18,Color_18)
	Color_19 = pgl.Material("Color_19" , ambient = (255,42,10) , diffuse = 0 , specular = (0,0,0) , shininess = 0 , )
	Color_19.name = "Color_19"
	context.turtle.setMaterial(19,Color_19)
	Color_20 = pgl.Material("Color_20" , ambient = (255,0,0) , diffuse = 0 , specular = (0,0,0) , shininess = 0 , )
	Color_20.name = "Color_20"
	context.turtle.setMaterial(20,Color_20)
	Color_21 = pgl.Material("Color_21" , ambient = (127,255,42) , diffuse = 0 , specular = (0,0,0) , shininess = 0 , )
	Color_21.name = "Color_21"
	context.turtle.setMaterial(21,Color_21)
	context.options.setSelection('Module inheritance',1)
	scalars = [('WITHLEAF', False, False, True), ('SEED', 1, 0, 100), ('WITH_TROPISM', False, False, True), ('TROPISM', 60, 0, 100), ('OLDSTRUCTURE', False, False, True), ('GENERATED_WITH_TROPISM', True, False, True), ('REGENERATE', True, False, True), ('COMPARE', True, False, True), ('FORCE_COMPARE', False, False, True), ('PROP_VIEW', True, False, True), ('RAMIF', 77, 0, 200), ('DETAILS', False, False, True)]
	context["__scalars__"] = scalars
	for n,v,mnv,mxv in scalars:
		context[n] = v
