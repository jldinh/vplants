
# This file has been generated at Thu Jan 15 18:03:32 2009

from openalea.core import *


__name__ = 'Demo.TwoSurfaces'

__editable__ = True
__description__ = 'A demo showing possibility to compute the fractal dimension with the 2 surfaces method.'
__license__ = 'GPL'
__url__ = ''
__alias__ = []
__version__ = '0.1'
__authors__ = 'F. Boudon'
__institutes__ = 'Cirad/Inria/Inra'
__icon__ = 'icon.png'
 

__all__ = ['TwoSurfaces', '_180713612', '_180713580']



TwoSurfaces = CompositeNodeFactory(name='TwoSurfaces',
                             description='Compute the fractal dim with the two surfaces method on a mango tree.',
                             category='Demo',
                             doc='',
                             inputs=[],
                             outputs=[],
                             elt_factory={  2: ('vplants.mtg', 'MTG'),
   3: ('vplants.mtg', 'PlantFrame'),
   4: ('vplants.mtg', 'VtxList'),
   5: ('openalea.python method', 'getitem'),
   6: ('openalea.data structure', 'int'),
   7: ('vplants.mtg', 'PlotPlantFrame'),
   8: ('vplants.mtg', 'DressingData'),
   9: ('openalea.function operator', 'function'),
   10: ('openalea.function operator', 'function'),
   11: ('vplants.mtg', 'Quotient'),
   12: ('openalea.function operator', 'function'),
   13: ('openalea.flow control', 'annotation'),
   14: ('openalea.function operator', 'map'),
   15: ('openalea.function operator', 'function'),
   16: ('vplants.fractalysis.engine', 'TwoSurfaces'),
   17: ('openalea.function operator', 'function'),
   18: ('openalea.flow control', 'annotation'),
   19: ('vplants.mtg', 'Linetree2Scene'),
   21: ('Demo.TwoSurfaces', 'f21.mtg'),
   22: ('openalea.stat.descriptive', 'log'),
   23: ('openalea.plottools', 'PointLine Style'),
   24: ('openalea.plottools', 'VS Plot'),
   25: ('openalea.stat.descriptive', 'log'),
   26: ('openalea.data structure.list', 'list'),
   27: ('openalea.flow control', 'annotation'),
   28: ('openalea.flow control', 'annotation'),
   29: ('openalea.flow control', 'annotation'),
   30: ('openalea.flow control', 'annotation'),
   33: ('Demo.TwoSurfaces', 'mango.drf'),
   35: ('openalea.function operator', 'function'),
   36: ('openalea.function operator', 'function'),
   37: ('openalea.function operator', 'function'),
   38: ('openalea.flow control', 'annotation'),
   39: ('openalea.flow control', 'annotation'),
   40: ('openalea.stat.regression', 'linear regression (scipy)'),
   41: ('openalea.stat.regression', 'linear regression to plot (plotools)')},
                             elt_connections={  163413544: (2, 0, 8, 0),
   163413556: (19, 0, 16, 0),
   163413568: (35, 0, 3, 12),
   163413580: (5, 0, 3, 1),
   163413592: (16, 0, 22, 0),
   163413604: (15, 0, 26, 0),
   163413616: (23, 0, 24, 0),
   163413628: (3, 0, 7, 0),
   163413640: (40, 0, 41, 0),
   163413652: (14, 0, 16, 1),
   163413664: (8, 0, 3, 23),
   163413676: (22, 0, 40, 0),
   163413688: (11, 0, 14, 0),
   163413700: (9, 0, 3, 17),
   163413712: (12, 0, 26, 0),
   163413724: (41, 0, 24, 0),
   163413736: (37, 0, 3, 13),
   163413748: (4, 0, 5, 0),
   163413760: (16, 1, 25, 0),
   163413772: (10, 0, 7, 6),
   163413784: (6, 0, 5, 1),
   163413796: (2, 0, 4, 0),
   163413808: (41, 1, 23, 0),
   163413820: (36, 0, 3, 14),
   163413832: (25, 0, 40, 1),
   163413844: (2, 0, 3, 0),
   163413856: (7, 0, 19, 0),
   163413868: (26, 0, 14, 1),
   163413880: (17, 0, 7, 2),
   163413892: (7, 0, 11, 0),
   163413904: (33, 0, 8, 1),
   163413916: (21, 0, 2, 0)},
                             elt_data={  2: {  'block': False,
         'caption': 'MTG',
         'hide': True,
         'lazy': True,
         'minimal': False,
         'port_hide_changed': set([]),
         'posx': -155.51310022383205,
         'posy': 65.215538663943221,
         'priority': 0,
         'user_application': None},
   3: {  'block': False,
         'caption': 'PlantFrame',
         'hide': True,
         'lazy': True,
         'minimal': False,
         'port_hide_changed': set([2, 12, 13, 14, 17, 23]),
         'posx': -154.98882454523539,
         'posy': 318.9370299831711,
         'priority': 0,
         'user_application': None},
   4: {  'block': False,
         'caption': 'VtxList',
         'hide': True,
         'lazy': True,
         'minimal': False,
         'port_hide_changed': set([]),
         'posx': -76.22690068680869,
         'posy': 162.02759501312605,
         'priority': 0,
         'user_application': None},
   5: {  'block': False,
         'caption': 'getitem',
         'hide': True,
         'lazy': True,
         'minimal': False,
         'port_hide_changed': set([]),
         'posx': -86.785102352270911,
         'posy': 212.19377825026714,
         'priority': 0,
         'user_application': None},
   6: {  'block': False,
         'caption': '0',
         'hide': True,
         'lazy': True,
         'minimal': False,
         'port_hide_changed': set([]),
         'posx': 8.375788665056831,
         'posy': 143.85190230030679,
         'priority': 0,
         'user_application': None},
   7: {  'block': False,
         'caption': 'PlotPlantFrame',
         'hide': True,
         'lazy': True,
         'minimal': False,
         'port_hide_changed': set([2, 6]),
         'posx': -25.211126439347979,
         'posy': 393.69550291551235,
         'priority': 0,
         'user_application': None},
   8: {  'block': False,
         'caption': 'DressingData',
         'hide': True,
         'lazy': True,
         'minimal': False,
         'port_hide_changed': set([]),
         'posx': 114.79378476291902,
         'posy': 170.98105275123893,
         'priority': 0,
         'user_application': None},
   9: {  'block': False,
         'caption': 'inverseZ',
         'hide': True,
         'lazy': True,
         'minimal': False,
         'port_hide_changed': set([]),
         'posx': 20.762756588327491,
         'posy': 190.18968185178363,
         'priority': 0,
         'user_application': None},
   10: {  'block': False,
          'caption': 'color',
          'hide': True,
          'lazy': True,
          'minimal': False,
          'port_hide_changed': set([]),
          'posx': 138.74724250103174,
          'posy': 289.90865367719221,
          'priority': 0,
          'user_application': None},
   11: {  'block': False,
          'caption': 'Quotient',
          'hide': True,
          'lazy': True,
          'minimal': False,
          'port_hide_changed': set([4]),
          'posx': 51.14312689220813,
          'posy': 566.5967899961754,
          'priority': 0,
          'user_application': None},
   12: {  'block': False,
          'caption': 'scaffold',
          'hide': True,
          'lazy': True,
          'minimal': False,
          'port_hide_changed': set([]),
          'posx': 264.82349200884858,
          'posy': 541.55327648782873,
          'priority': 0,
          'user_application': None},
   13: {  'posx': 405.84205934696593,
          'posy': 40.81345015419793,
          'txt': 'Author: F. Boudon'},
   14: {  'block': False,
          'caption': 'map',
          'hide': True,
          'lazy': True,
          'minimal': False,
          'port_hide_changed': set([]),
          'posx': 120.58695476008873,
          'posy': 645.93013281173467,
          'priority': 0,
          'user_application': None},
   15: {  'block': False,
          'caption': 'oyos',
          'hide': True,
          'lazy': True,
          'minimal': False,
          'port_hide_changed': set([]),
          'posx': 162.59646957281635,
          'posy': 542.74545659151318,
          'priority': 0,
          'user_application': None},
   16: {  'block': False,
          'caption': 'TwoSurfaces',
          'hide': True,
          'lazy': True,
          'minimal': False,
          'port_hide_changed': set([]),
          'posx': 69.100415352679278,
          'posy': 714.38204255930441,
          'priority': 0,
          'user_application': None},
   17: {  'block': False,
          'caption': 'is_leaf',
          'hide': True,
          'lazy': True,
          'minimal': False,
          'port_hide_changed': set([]),
          'posx': 62.731655339195299,
          'posy': 279.79621831420604,
          'priority': 0,
          'user_application': None},
   18: {  'posx': 406.63412849716343,
          'posy': 4.5385882297153408,
          'txt': 'Two surfaces method to compute fractal dimension '},
   19: {  'block': False,
          'caption': 'Linetree2Scene',
          'hide': True,
          'lazy': True,
          'minimal': False,
          'port_hide_changed': set([]),
          'posx': -117.641682107371,
          'posy': 574.0122364687777,
          'priority': 0,
          'user_application': None},
   21: {  'block': False,
          'caption': 'f21.mtg',
          'hide': True,
          'lazy': True,
          'port_hide_changed': set([2]),
          'posx': -149.99999999999997,
          'posy': -11.249999999999998,
          'priority': 0,
          'user_application': None},
   22: {  'block': False,
          'caption': 'log',
          'hide': True,
          'lazy': True,
          'port_hide_changed': set([]),
          'posx': -72.25104451410526,
          'posy': 838.87925351181786,
          'priority': 0,
          'user_application': None},
   23: {  'block': False,
          'caption': 'PointLine Style',
          'hide': True,
          'lazy': True,
          'minimal': False,
          'port_hide_changed': set([]),
          'posx': 24.869522028410202,
          'posy': 1036.4977633472945,
          'priority': 0,
          'user_application': None},
   24: {  'block': False,
          'caption': 'VS Plot',
          'hide': True,
          'lazy': True,
          'minimal': False,
          'port_hide_changed': set([]),
          'posx': -33.029204469695046,
          'posy': 1110.9519151147795,
          'priority': 0,
          'user_application': None},
   25: {  'block': False,
          'caption': 'log',
          'hide': True,
          'lazy': True,
          'port_hide_changed': set([]),
          'posx': 15.282786319863497,
          'posy': 822.40631817899282,
          'priority': 0,
          'user_application': None},
   26: {  'block': False,
          'caption': 'list',
          'hide': True,
          'lazy': True,
          'minimal': False,
          'port_hide_changed': set([]),
          'posx': 186.85858156389915,
          'posy': 592.11639721169581,
          'priority': 0,
          'user_application': None},
   27: {  'posx': 115.17569414525539,
          'posy': 401.92277576830281,
          'txt': 'Construct a representation from digitized MTG data'},
   28: {  'posx': 355.38566636981795,
          'posy': 584.37896029433887,
          'txt': 'Quotient the representation to determine\nmacro envelopes'},
   29: {  'posx': 249.71338344682493,
          'posy': 843.64652191746086,
          'txt': 'Compute and plot the linear regression to\nestimate fractal dimension'},
   30: {  'posx': 248.51849963715219,
          'posy': 710.81335473861895,
          'txt': 'Compute envelope surface and leaf area\nfor each macro nodes'},
   33: {  'block': False,
          'caption': 'mango.drf',
          'hide': True,
          'lazy': True,
          'port_hide_changed': set([2]),
          'posx': 167.49999999999997,
          'posy': 36.249999999999993,
          'priority': 0,
          'user_application': None},
   35: {  'block': False,
          'caption': 'goodAA',
          'hide': True,
          'lazy': True,
          'minimal': False,
          'port_hide_changed': set([]),
          'posx': -281.56565656565647,
          'posy': 183.08080808080803,
          'priority': 0,
          'user_application': None},
   36: {  'block': False,
          'caption': 'goodCC',
          'hide': True,
          'lazy': True,
          'minimal': False,
          'port_hide_changed': set([]),
          'posx': -284.98288786354624,
          'posy': 298.48207728866174,
          'priority': 0,
          'user_application': None},
   37: {  'block': False,
          'caption': 'goodBB',
          'hide': True,
          'lazy': True,
          'minimal': False,
          'port_hide_changed': set([]),
          'posx': -279.60849925870491,
          'posy': 241.16161616161611,
          'priority': 0,
          'user_application': None},
   38: {  'posx': -32.90795471865431,
          'posy': -41.567942802510693,
          'txt': 'Read MTG description'},
   39: {  'posx': 359.33225166485965,
          'posy': 1077.0518476966117,
          'txt': 'Plot linear regression'},
   40: {  'block': False,
          'caption': 'linear regression (scipy)',
          'hide': True,
          'lazy': True,
          'port_hide_changed': set([]),
          'posx': -91.249999999999986,
          'posy': 898.74999999999989,
          'priority': 0,
          'user_application': None},
   41: {  'block': False,
          'caption': 'linear regression to plot (plotools)',
          'hide': True,
          'lazy': True,
          'port_hide_changed': set([]),
          'posx': -119.09475712228075,
          'posy': 954.52098997655685,
          'priority': 0,
          'user_application': None},
   '__in__': {  'caption': 'In',
                'hide': True,
                'lazy': True,
                'minimal': False,
                'port_hide_changed': set([]),
                'posx': 20.0,
                'posy': 5.0,
                'priority': 0},
   '__out__': {  'caption': 'Out',
                 'hide': True,
                 'lazy': True,
                 'minimal': False,
                 'port_hide_changed': set([]),
                 'posx': 20.0,
                 'posy': 250.0,
                 'priority': 0}},
                             elt_value={  2: [  (1, 'None'),
         (2, 'None'),
         (3, 'None'),
         (4, '[]'),
         (5, '[]'),
         (6, 'None'),
         (7, 'None'),
         (8, 'None')],
   3: [  (2, '3'),
         (3, 'None'),
         (4, 'None'),
         (5, 'None'),
         (6, 'None'),
         (7, 'None'),
         (8, 'None'),
         (9, 'None'),
         (10, 'None'),
         (11, 'None'),
         (15, 'None'),
         (16, 'None'),
         (18, 'None'),
         (19, 'None'),
         (20, 'None'),
         (21, 'None'),
         (22, 'None')],
   4: [(1, '1')],
   5: [],
   6: [(0, '0')],
   7: [  (1, 'None'),
         (3, 'None'),
         (4, 'None'),
         (5, 'None'),
         (7, 'None'),
         (8, 'None'),
         (9, 'None'),
         (10, 'None'),
         (11, 'None'),
         (12, 'None'),
         (13, 'None'),
         (14, 'None'),
         (15, 'None'),
         (16, 'None'),
         (17, 'None')],
   8: [],
   9: [  (  0,
            '"def z(x):\\n\\timport openalea.aml as aml\\n\\tz = aml.Feature(x,\'ZZ\')\\n\\tif z :\\n\\t\\treturn -z\\n\\treturn None"')],
   10: [  (  0,
             '"def col(x):\\n\\timport openalea.aml as aml\\n\\tif aml.Class(x) == \'F\':\\n\\t\\treturn \'green\'\\n\\treturn None"')],
   11: [(1, 'None'), (2, 'None'), (3, 'None'), (4, 'None')],
   12: [(0, "'def scaffold(x):\\n\\treturn x in [13,1286]\\n'")],
   13: [],
   14: [],
   15: [  (  0,
             "'import openalea.aml as aml\\nsons = []\\nfor i in [12,1285]:\\n\\tsons += aml.Descendants(i)\\nroots = [aml.Components(i)[0] for i in sons]\\n\\ndef oyos(x):\\n\\treturn x in roots\\n'")],
   16: [],
   17: [  (  0,
             '"import openalea.aml as aml\\ndef is_leaf(x):\\n\\treturn aml.Class(x) == \'F\'\\n"')],
   18: [],
   19: [(1, "'Micro'")],
   21: [  (0, 'PackageData(Demo.TwoSurfaces, f21.mtg)'),
          (1, 'None'),
          (2, 'None')],
   22: [],
   23: [(1, "'Mango a19'"), (2, "'--'"), (3, "'^'"), (4, "'Default'")],
   24: [  (1, "'PointLine'"),
          (2, "'Box Counting Method'"),
          (3, "'$\\\\log(\\\\delta)$'"),
          (4, "'$\\\\log(N_{\\\\delta})$'"),
          (5, '1')],
   25: [],
   26: [],
   27: [],
   28: [],
   29: [],
   30: [],
   33: [  (0, 'PackageData(Demo.TwoSurfaces, mango.drf)'),
          (1, 'None'),
          (2, 'None')],
   35: [  (  0,
             '"def goodAA(x):\\n\\timport openalea.aml as aml\\n\\taa = aml.Feature(x,\'AA\')\\n\\tif aa:\\n\\t\\treturn 180+aa\\n\\treturn None"')],
   36: [  (  0,
             '"def goodCC(x):\\n\\timport openalea.aml as aml\\n\\tcc = aml.Feature(x,\'CC\')\\n\\tif cc:\\n\\t\\treturn 180-cc\\n\\treturn None"')],
   37: [  (  0,
             '"def goodBB(x):\\n\\timport openalea.aml as aml\\n\\tbb = aml.Feature(x,\'BB\')\\n\\tif bb:\\n\\t\\treturn -bb\\n\\treturn None"')],
   38: [],
   39: [],
   40: [],
   41: [],
   '__in__': [],
   '__out__': []},
                             lazy=True,
                             )



_180713612 = DataFactory(name='f21.mtg',
                    description='mango mtg',
                    editors=None,
                    includes=None,
                    )


_180713580 = DataFactory(name='mango.drf',
                    description='mango drf file',
                    editors=None,
                    includes=None,
                    )



